=head1 NAME

hash_greylisting

=head1 DESCRIPTION

Plugin to implement the algorithm similar to 'greylisting' proposed by Evan 
Harris in http://projects.puremagic.com/greylisting/. Hash greylisting is 
a form of denysoft filter, where unrecognised new messages are 
temporarily denied for some initial period, to foil spammers using 
fire-and-forget spamware, http_proxies, etc.

Hash greylisting track incoming messages using MD5 hash of message body,
sender address, recipient addresses, message-id header value. After initial
'grey' period remote IP address which try to send message with known MD5 hash
is whitelisted.

=head1 CONFIG

The following parameters can be passed to hash_greylisting:

=over 4

=item black_timeout <timeout_seconds>

The initial period, in seconds, for which we issue DENYSOFTs for 
connections from an unknown (or timed out) IP address which sends message with
unknown hash. Default: 60 seconds.

=item grey_timeout <timeout_seconds>

The subsequent 'grey' period, after the initial black blocking period,
when we will accept a delivery from a formerly-unknown IP with formerly-unknown
message hash. If a new connection is received during this time, we will 
record a successful delivery against this IP address, which whitelists 
it for future deliveries (see following). Default: 3 hours 20 minutes.

=item white_timeout <timeout_seconds>

The period after which a known IP will be considered 
stale, and we will issue DENYSOFTs again. New deliveries reset the 
timestamp on the address and renew this timeout. Default: 36 days.

=item max_size <bytes>

Specifies the maximum size of message body. Any mail exceeding this size will 
be skipped. Default: 200000.

=item flush_period <time_seconds>

Database would grow infinitely if it wasn't cleaned. This parameter 
specify the period in which database will be cleaned. Set this parameter
to -1 if you want to disable database cleaning. Default 1 hour.

=item mode ( denysoft | testonly | off )

Operating mode. In 'denysoft' mode we log and track connections and 
issue DENYSOFTs for black connections; in 'testonly' mode we log and 
track connections as normal, but never actually issue DENYSOFTs 
(useful for seeding the database and testing without impacting 
deliveries); in 'off' mode we do nothing (useful for turning 
greylisting off globally if using per_recipient configs). 
Default: denysoft.

=item db_dir <path>

Path to a directory in which the greylisting DB will be stored.  This
directory must be writable by the qpsmtpd user.  By default, the first
usable directory from the following list will be used:

=over 4

=item /var/lib/qpsmtpd/greylisting

=item I<BINDIR>/var/db (where BINDIR is the location of the qpsmtpd binary)

=item I<BINDIR>/config

=back

=item per_recipient <bool>

Flag to indicate whether to use per-recipient configs. 

=item per_recipient_db <bool>

Flag to indicate whether to use per-recipient greylisting 
databases (default is to use a shared database).  Per-recipient configuration
directories, if determined, supercede I<db_dir>.

=back

=head1 BUGS

Database locking is implemented using flock, which may not work on 
network filesystems e.g. NFS. If this is a problem, you may want to
use something like File::NFSLock instead.

=head1 AUTHOR

Based on plugin written by Gavin Carr <gavin@openfusion.com.au>.

=cut

BEGIN { @AnyDBM_File::ISA = qw(DB_File GDBM_File NDBM_File) }
use AnyDBM_File;
use Fcntl qw(:DEFAULT :flock);
use Digest::MD5;
use strict;

my $VERSION = '0.01';

my $DENYMSG = "This mail is temporarily denied";
my ($QPHOME) = ($0 =~ m!(.*?)/([^/]+)$!);
my $DB = "hash_greylist.dbm";
my %PERMITTED_ARGS = map { $_ => 1 } qw(per_recipient 
  black_timeout grey_timeout white_timeout mode db_dir flush_period max_size);

my %DEFAULTS = (
  black_timeout => 60,
  grey_timeout =>  3 * 3600 + 20 * 60,
  white_timeout => 36 * 24 * 3600,
  flush_period => 60*60,
  max_size => 200000,
  mode => 'denysoft',
);

sub register {
  my ($self, $qp, %arg) = @_;
  my $config = { %DEFAULTS, 
    map { split /\s+/, $_, 2 } $self->qp->config('hash_greylist'), 
    %arg };
  if (my @bad = grep { ! exists $PERMITTED_ARGS{$_} } sort keys %$config) {
    $self->log(LOGALERT, "invalid parameter(s): " . join(',',@bad));
  }
  $self->{_hash_greylist_config} = $config;
}

sub compute_md5_hash {
  my ($self,$transaction) = @_;
  my $hash=Digest::MD5->new;

  $transaction->body_resetpos;

  while (my $line = $transaction->body_getline) {
    $hash->add($line);
  }
  $hash->add($transaction->sender);
  foreach my $recip ($transaction->recipients) {
    $hash->add($recip->address);
  }
  my $msg_id = $transaction->header->get('Message-Id') || '';
  $hash->add($msg_id);

  return $hash->hexdigest;
}

sub flush_db {
    my ($self,$db)     = @_;
    my $hashes_deleted = 0;
    my $ips_deleted    = 0;
    my $now            = time;
    my $config         = $self->{_hash_greylist_config};

    foreach my $key ( keys %$db ) {
        if ( $key =~ /\d+\.\d+\.\d+\.\d+/ ) {
            if ( $now - $$db{$key} > $config->{white_timeout} ) {
                delete $$db{$key};
                $ips_deleted++;
            }
        }
        elsif ( $key =~ /[0-9a-z]{32}/ ) {
            my ($ts,$count)=split(/:/,$$db{$key});
            if ( $now - $ts > $config->{grey_timeout} ) {
                delete $$db{$key};
                $hashes_deleted++;
            }
        }
        elsif ( $key eq 'lastflushed' ) { }
        else {
            delete $$db{$key};
        }
    }
    $$db{'lastflushed'} = $now;
    $self->log(LOGINFO, "hash_greylisting database flushed, $ips_deleted IPs and $hashes_deleted hashes deleted.");
}

sub hook_data_post {
  my ($self, $transaction) = @_;
  my $sender = $transaction->sender;
  my ($status, $msg) = $self->denysoft_greylist($transaction);
  if ($status == DENYSOFT) {
    # Deny here (per-rcpt) unless this is a <> sender, for smtp probes
    return DENYSOFT, $msg if $sender->address;
    $transaction->notes('hash_greylist', $msg);
  }
  return DECLINED;
}

sub hook_data {
  my ($self, $transaction) = @_;
  my $note = $transaction->notes('hash_greylist');
  return DECLINED unless $note;
  # Decline if ALL recipients are whitelisted
  if (($transaction->notes('whitelistrcpt')||0) == scalar($transaction->recipients)) {
    $self->log(LOGWARN,"all recipients whitelisted - skipping");
    return DECLINED;
  }
  return DENYSOFT, $note;
}

sub denysoft_greylist {
  my ($self, $transaction, $config) = @_;
  $config ||= $self->{_hash_greylist_config};
  $self->log(LOGDEBUG, "config: " . join(',',map { $_ . '=' . $config->{$_} } sort keys %$config));

  # Always allow relayclients and whitelisted hosts/senders
  return DECLINED if $self->qp->connection->relay_client();
  return DECLINED if $self->qp->connection->notes('whitelisthost');
  return DECLINED if $transaction->notes('whitelistsender');
  return DECLINED if $transaction->data_size > $config->{max_size};

  if ($config->{db_dir} && $config->{db_dir} =~ m{^([-a-zA-Z0-9./_]+)$}) {
    $config->{db_dir} = $1; 
  }

  # Setup database location
  my $dbdir = $transaction->notes('per_rcpt_configdir') 
    if $config->{per_recipient_db};
  for my $d ($dbdir, $config->{db_dir}, "/var/lib/qpsmtpd/greylisting",
             "$QPHOME/var/db", "$QPHOME/config") {
    last if $dbdir ||= $d && -d $d && $d;
  }
  my $db = "$dbdir/$DB";
  $self->log(LOGINFO,"using $db as greylisting database");

  my $remote_ip = $self->qp->connection->remote_ip;
  my $fmt = "%d:%d";

  # Check denysoft db
  unless (open LOCK, ">$db.lock") {
    $self->log(LOGCRIT, "opening lockfile failed: $!");
    return DECLINED;
  }
  unless (flock LOCK, LOCK_EX) {
    $self->log(LOGCRIT, "flock of lockfile failed: $!");
    close LOCK;
    return DECLINED;
  }
  my %db = ();
  unless (tie %db, 'AnyDBM_File', $db, O_CREAT|O_RDWR, 0600) {
    $self->log(LOGCRIT, "tie to database $db failed: $!");
    close LOCK;
    return DECLINED;
  }

  my $lastflushed= $db{'lastflushed'} || 0;
  $self->flush_db (\%db) if ( ($config->{flush_period} > 0) && abs(time - $lastflushed) > $config->{flush_period} );

  if ($db{$remote_ip}) {
    if (time - $db{$remote_ip} < $config->{white_timeout}) {
        $self->log(LOGCRIT, "IP ".$remote_ip." is white");
        untie %db;
        close LOCK;
        return DECLINED;
    } else {
      $self->log(LOGERROR, "IP ".$remote_ip." has timed out (white)");
      delete $db{$remote_ip};
    }
  }

  my $message_hash;
  unless ($message_hash=$transaction->notes('md5_hash')) {
    $message_hash=$self->compute_md5_hash($transaction);
    $transaction->notes('md5_hash',$message_hash);
  }

  if($db{$message_hash}){
    $self->log(LOGERROR, "message_hash: " . $message_hash);
    my ($ts,$count)=split(/:/,$db{$message_hash});
    if (!$count) { $count=2; } else { $count++; }
    $self->log(LOGERROR, "ts: " . localtime($ts) . ", now: " . localtime);

      # Black IP - deny, but don't update timestamp
      if (time - $ts < $config->{black_timeout}) {
        $db{$message_hash} = sprintf $fmt, time, $count;
        $self->log(LOGCRIT, "message: " . $message_hash . " black DENYSOFT - $count failed connections");
        untie %db;
        close LOCK;
        return $config->{mode} eq 'testonly' ? DECLINED : DENYSOFT, $DENYMSG;
      }
      # Grey IP - accept unless timed out
      elsif (time - $ts < $config->{grey_timeout}) {
        delete $db{$message_hash};
        $db{$remote_ip}=time;
        $self->log(LOGCRIT, "message: " . $message_hash . " IP: " . $remote_ip. " updated grey->white");
        untie %db;
        close LOCK;
        return DECLINED;
      }
      else {
        $self->log(LOGERROR, "message: ".$message_hash." has timed out (grey)");
        delete $db{message_hash};
      }
  } else {
    $db{$message_hash} = sprintf $fmt, time, 1;
    $self->log(LOGINFO, "message: $message_hash is seen first time");
    untie %db;
    close LOCK;
    return $config->{mode} eq 'testonly' ? DECLINED : DENYSOFT, $DENYMSG;
  }
}
